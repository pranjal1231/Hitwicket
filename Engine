if ((tail = str_tok_esc(options[i].buf, &oname, '=', ESC_SEQ)) &&
            (tail = str_tok_esc(tail, &ovalue, '=', ESC_SEQ))) {
            str_cpy_fmt(&line, "setoption name %S value %S", oname, ovalue);

            deadline_set(w, e.name.buf, system_msec(), e.timeOut);
            engine_writeln(w, &e, line.buf);
            deadline_clear(w);
        } else
            DIE("Cannot parse '%s'\n", options[i].buf);
    }
@@ -333,6 +336,12 @@ void engine_writeln(const Worker *w, const Engine *e, char *buf) {
    }
}

void engine_newgame(Worker *w, const Engine *e) {
    deadline_set(w, e->name.buf, system_msec(), e->timeOut);
    engine_writeln(w, e, "ucinewgame");
    deadline_clear(w);
}

void engine_sync(Worker *w, const Engine *e) {
    deadline_set(w, e->name.buf, system_msec(), e->timeOut);
    engine_writeln(w, e, "isready");
  1  
src/engine.h
@@ -52,6 +52,7 @@ void engine_destroy(Worker *w, Engine *e);
void engine_readln(const Worker *w, const Engine *e, str_t *line);
void engine_writeln(const Worker *w, const Engine *e, char *buf);

void engine_newgame(Worker *w, const Engine *e);
void engine_sync(Worker *w, const Engine *e);
bool engine_bestmove(Worker *w, const Engine *e, int64_t *timeLeft, str_t *best, str_t *pv,
                     Info *info);
  2  
src/game.c
@@ -197,7 +197,7 @@ int game_play(Worker *w, Game *g, const Options *o, const Engine engines[2],
                DIE("[%d] '%s' does not support Chess960\n", threadId, engines[i].name.buf);
        }

        engine_writeln(w, &engines[i], "ucinewgame");
        engine_newgame(w, &engines[i]);
        engine_sync(w, &engines[i]);
    }

  8  
src/main.c
@@ -199,9 +199,15 @@ int main(int argc, const char **argv) {
        // are likely to face a completely unresponsive engine, where any attempt at I/O will block
        // the master thread, on top of the already blocked worker. Hence, we must DIE().
        for (int i = 0; i < options.concurrency; i++)
            if (deadline_overdue(&vecWorkers[i]))
            if (deadline_overdue(&vecWorkers[i])) {
                DIE_IF(fprintf(vecWorkers[i].log,
                               "deadline_clear: now is T1=%" PRId64
                               ". %s responded after T0+D=%" PRId64 ". fatal error!\n",
                               system_msec(), vecWorkers[i].deadline.engineName.buf,
                               vecWorkers[i].deadline.timeLimit) < 0);
                DIE("[%d] engine %s is unresponsive\n", vecWorkers[i].id,
                    vecWorkers[i].deadline.engineName.buf);
            }
    } while (!job_queue_done(&jq));
